[Config NonPollingPon]
network = NonPollingPon
sim-time-limit = 320s
cmdenv-express-mode=true

#
# README 
#
# The following parameters have been used in order to test the NON-polling based
# fixed allocation. This algorithm work based on MPCP GATE bursts. ONUs receive their
# allocation for the current SuperSlot. Then they are responsible for updating/shifting
# their clock into the next SuperSlot... (synchronization is assumed)
#
# - Results
#   With this configuration achieved utilization was ~97.9%
#


# MACs
**.Server.eth*.mac.txrate = 1Gbps
**.host*.eth*.mac.txrate = 1Gbps
**.epon*.mac.txrate = 1Gbps
**.*.queueLimit = 1000



#---------------------------------------------------------------
#----------------- EPON ----------------------------------------
#---------------------------------------------------------------

# OLT
# the following AFFECT NON-POLLING ALGORITHMS cause they define the 
# SuperSlot length...
**.epon_olt.olt_if.olt_Q_mgmt.regTimeInt = 700ms 	#NOTE: SlotLen(ns16)*SlotNum + regTimeInt(ns16) < 65536
**.epon_olt.olt_if.olt_Q_mgmt.slotLength = 3*1000ns   # 3us = 3000ns = 3000bits slot (fits frame)
**.epon_olt.olt_if.olt_Q_mgmt.slotNumber = 1.6*1000 	# X*1000 = X*3 ms cycle 

# NON-POLLING MODULEs (also the default ones...)
**.onu_port.QMgmtUnit = "ONU_QPL_RR"
**.onu_port.MacCtlModule = "ONUMacCtl_NP" # NON-Polling
**.olt_if.QMgmtUnit =  "OLT_QPL_RR"  # NON-Polling

# Service Differetiation on Relay module
**.epon_olt.relayUnitType = "EPON_OLT_vlanBridgeRelay"
**.epon_onu*.relayUnitType = "EPON_ONU_vlanBridgeRelay"


# initial values for each service (committed)
# Global MAX for the area (1000 == unlimited logically)
# ORDERED BY SERVICE PRIORITY
*.pon_Splitter.haltOn = 10 # strict for testing collisions


#---------------------------------------------------------------
#----------------- SERVICES ------------------------------------
#--------------------------------------------------------------- 
**.serviceConfig.services = "Data Voice Video"
**.serviceConfig.srvPrior = "0.1 0.5 0.4"
**.serviceConfig.vlanMap = "3 2 4"
# NOTE: MSR of 2M should be used to fit MTUs of 1500
**.serviceConfig.msrPerFlow = "-1 96000 5000000"
**.serviceConfig.mrrPerFlow = "-1 -1 1200000"
**.encap.vlans = "3 2 4"

#---------------------------------------------------------------
# ---- App -----------------------------------------------------
#---------------------------------------------------------------
**.Server.numUdpApps = 3
**.Server.udpApp*.typename = "UDPSink"

**.txQueueLimit = 1000000

**.numUdpApps = 3
**.host*.udpApp*.typename = "UDPBasicApp"


## DATA ##
**.udpApp[0].localPort = 1003 # both tg and sink
**.udpApp[0].destPort = 1003
**.host*.udpApp[0].destAddresses = "10.0.3.4"	# Service Differantion

# --- TSpec ~ 5Mbps CBR
**.udpApp[0].messageLength = 1300B
**.udpApp[0].sendInterval =  0.000020s
 

## Voice ##
**.udpApp[1].localPort = 1002
**.udpApp[1].destPort = 1002
**.host*.udpApp[1].destAddresses = "10.0.2.4"	# Service Differantion

# --- TSpec ~ 96kbps CBR
**.udpApp[1].messageLength = uniform(180B,280B) # mean packet size = 230  
**.udpApp[1].sendInterval = 0.00020s

## Video ##
**.udpApp[2].localPort = 1004
**.udpApp[2].destPort = 1004
**.host*.udpApp[2].destAddresses = "10.0.4.4"	# Service Differantion
# --- TSpec ~ 96kbps CBR
**.udpApp[2].messageLength = uniform(1000B,1200B) # mean packet size = 230  
**.udpApp[2].sendInterval = 0.000020s

#
# WorkArrounds!
#

# ARP is stuck in the default Queue, which under congestion doesn't get
# anything! So:
**.arp.cacheTimeout = 1000s
**.arp_vlans.cacheTimeout = 1000s